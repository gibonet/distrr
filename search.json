[{"path":"https://gibonet.github.io/distrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sandro Burri. Author, maintainer.","code":""},{"path":"https://gibonet.github.io/distrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Burri S (2024). distrr: Estimate Manage Empirical Distributions. R package version 0.0.6.9000, https://github.com/gibonet/distrr, https://gibonet.github.io/distrr/, https://gibonet.github.io/distrr.","code":"@Manual{,   title = {distrr: Estimate and Manage Empirical Distributions},   author = {Sandro Burri},   year = {2024},   note = {R package version 0.0.6.9000, https://github.com/gibonet/distrr, https://gibonet.github.io/distrr/},   url = {https://gibonet.github.io/distrr}, }"},{"path":[]},{"path":"https://gibonet.github.io/distrr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Estimate and Manage Empirical Distributions","text":"distrr provides tools estimate manage empirical distributions. particular, one main features distrr creation data cubes estimated statistics, include combinations variables interest. package makes strong usage tools provided dplyr, grammar data manipulation. main functions create data cube dcc5() dcc6() (dcc stands data cube creation). data cube creation like: dplyr terms, operation done possible combination variables used grouping. result data frame “tidy form”. See examples Usage section .","code":"data |>   group_by(some variables) |>   summarise(one or more estimated statistic)"},{"path":"https://gibonet.github.io/distrr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate and Manage Empirical Distributions","text":"","code":"# From CRAN install.packages(\"distrr\")   # Or the development version from GitHub: # install.packages(\"remotes\") remotes::install_github(\"gibonet/distrr\")"},{"path":"https://gibonet.github.io/distrr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Estimate and Manage Empirical Distributions","text":"Consider invented_wages dataset: want count number observations estimate average wage gender, dplyr can : can estimate statistics grouped education changing argument inside group_by: estimate statistics gender education including variables group_by: dcc5 can perform steps one call: resulting data frame contains column grouping variable, estimations combinations variables: gender education gender education plus statistics dataset, without grouping (can set argument ., default TRUE). Note result rows variables take value \"Totale\". variable value, means subset data considered row contains values variable. example, first row result dcc5 contains estimations dataset. value \"Totale\" can changed argument .total. result dcc5 can produced dcc6, slightly different approach. Compared results obtained dcc5, added weighted average wages changed \"Totale\" value \"TOTAL\".","code":"library(distrr) str(invented_wages) #> tibble [1,000 × 5] (S3: tbl_df/tbl/data.frame) #>  $ gender        : Factor w/ 2 levels \"men\",\"women\": 1 2 1 2 1 1 1 2 2 2 ... #>  $ sector        : Factor w/ 2 levels \"secondary\",\"tertiary\": 2 1 2 2 1 1 2 1 2 1 ... #>  $ education     : Factor w/ 3 levels \"I\",\"II\",\"III\": 3 2 2 2 2 1 3 1 2 2 ... #>  $ wage          : num [1:1000] 8400 4200 5100 7400 4300 4900 5400 2900 4500 3000 ... #>  $ sample_weights: num [1:1000] 105 32 36 12 21 46 79 113 34 32 ... library(dplyr) invented_wages |>   group_by(gender) |>   summarise(n = n(), av_wage = mean(wage)) |>   ungroup() #> # A tibble: 2 × 3 #>   gender     n av_wage #>   <fct>  <int>   <dbl> #> 1 men      547   5435. #> 2 women    453   4441. invented_wages |>   group_by(education) |>   summarise(n = n(), av_wage = mean(wage)) |>   ungroup() #> # A tibble: 3 × 3 #>   education     n av_wage #>   <fct>     <int>   <dbl> #> 1 I           172   3774. #> 2 II          719   5099. #> 3 III         109   6139. invented_wages |>   group_by(gender, education) |>   summarise(n = n(), av_wage = mean(wage)) |>   ungroup() #> `summarise()` has grouped output by 'gender'. You can override using the #> `.groups` argument. #> # A tibble: 6 × 4 #>   gender education     n av_wage #>   <fct>  <fct>     <int>   <dbl> #> 1 men    I            60   4627. #> 2 men    II          409   5278. #> 3 men    III          78   6886. #> 4 women  I           112   3317. #> 5 women  II          310   4865. #> 6 women  III          31   4261. invented_wages |>    dcc5(.variables = c(\"gender\", \"education\"), av_wage = ~mean(wage)) #>   |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100% #> # A tibble: 12 × 4 #>    gender education     n av_wage #>  * <fct>  <fct>     <int>   <dbl> #>  1 Totale Totale     1000   4985. #>  2 Totale I           172   3774. #>  3 Totale II          719   5099. #>  4 Totale III         109   6139. #>  5 men    Totale      547   5435. #>  6 men    I            60   4627. #>  7 men    II          409   5278. #>  8 men    III          78   6886. #>  9 women  Totale      453   4441. #> 10 women  I           112   3317. #> 11 women  II          310   4865. #> 12 women  III          31   4261. # Set a list of function calls list_of_funs <- list(   n = ~n(),   av_wage = ~mean(wage),   weighted_av_wage = ~weighted.mean(wage, sample_weights) )  # Set the grouping variables vars <- c(\"gender\", \"education\")  # And create the data cube with dcc6 invented_wages |>    dcc6(.variables = vars, .funs_list = list_of_funs, .total = \"TOTAL\") #>   |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100% #> # A tibble: 12 × 5 #>    gender education     n av_wage weighted_av_wage #>  * <fct>  <fct>     <int>   <dbl>            <dbl> #>  1 TOTAL  TOTAL      1000   4985.            4645. #>  2 TOTAL  I           172   3774.            3527. #>  3 TOTAL  II          719   5099.            4917. #>  4 TOTAL  III         109   6139.            5885. #>  5 men    TOTAL       547   5435.            5323. #>  6 men    I            60   4627.            4681. #>  7 men    II          409   5278.            5129. #>  8 men    III          78   6886.            6173. #>  9 women  TOTAL       453   4441.            3614. #> 10 women  I           112   3317.            3227. #> 11 women  II          310   4865.            4225. #> 12 women  III          31   4261.            4388."},{"path":"https://gibonet.github.io/distrr/reference/Fhat_conditional_.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","title":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","text":"Weighted empirical cumulative distribution function (ecdf), conditional one variables","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_conditional_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","text":"","code":"Fhat_conditional_(.data, .variables, x, weights)"},{"path":"https://gibonet.github.io/distrr/reference/Fhat_conditional_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","text":".data data frame .variables character vector one column names x character vector length one, name numeric column whose conditional ecdf estimated weights character vector length one, indicating name positive numeric column weights, used estimation conditional ecdf","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_conditional_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","text":"data frame, variables used condition, x variable, columns wsum (aggregated sum weights, based unique values x) Fhat (estimated conditional Fhat). addition data frame, object classes grouped_df, tbl_df tbl (package dplyr)","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_conditional_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted empirical cumulative distribution function (ecdf), conditional on one or more variables — Fhat_conditional_","text":"","code":"Fhat_conditional_(   mtcars,   .variables = c(\"vs\", \"am\"),   x = \"mpg\",   weights = \"cyl\" ) #> # A tibble: 28 × 6 #> # Groups:   vs, am [4] #>       vs    am   mpg  wsum  wcum  Fhat #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     0     0  10.4    16    16 0.167 #>  2     0     0  13.3     8    24 0.25  #>  3     0     0  14.3     8    32 0.333 #>  4     0     0  14.7     8    40 0.417 #>  5     0     0  15.2    16    56 0.583 #>  6     0     0  15.5     8    64 0.667 #>  7     0     0  16.4     8    72 0.75  #>  8     0     0  17.3     8    80 0.833 #>  9     0     0  18.7     8    88 0.917 #> 10     0     0  19.2     8    96 1     #> # ℹ 18 more rows"},{"path":"https://gibonet.github.io/distrr/reference/Fhat_df_.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","title":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","text":"Weighted empirical cumulative distribution function (data frame version)","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_df_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","text":"","code":"Fhat_df_(.data, x, weights)"},{"path":"https://gibonet.github.io/distrr/reference/Fhat_df_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","text":".data data frame x name numeric column (character) weights name weight column (character)","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_df_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","text":"data frame columns: x, wcum Fhat","code":""},{"path":"https://gibonet.github.io/distrr/reference/Fhat_df_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted empirical cumulative distribution function (data frame version) — Fhat_df_","text":"","code":"data(invented_wages) Fhat_df_(invented_wages, \"wage\", \"sample_weights\") #> # A tibble: 90 × 4 #>     wage  wsum  wcum     Fhat #>    <dbl> <dbl> <dbl>    <dbl> #>  1  2000    34    34 0.000484 #>  2  2100   514   548 0.00781  #>  3  2200    86   634 0.00903  #>  4  2300  1084  1718 0.0245   #>  5  2400   955  2673 0.0381   #>  6  2500   723  3396 0.0484   #>  7  2600  1166  4562 0.0650   #>  8  2700  1029  5591 0.0796   #>  9  2800  1277  6868 0.0978   #> 10  2900  2326  9194 0.131    #> # ℹ 80 more rows"},{"path":"https://gibonet.github.io/distrr/reference/combn_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all combinations of the elements of a character vector — combn_char","title":"Generate all combinations of the elements of a character vector — combn_char","text":"Generate combinations elements character vector","code":""},{"path":"https://gibonet.github.io/distrr/reference/combn_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all combinations of the elements of a character vector — combn_char","text":"","code":"combn_char(x)"},{"path":"https://gibonet.github.io/distrr/reference/combn_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all combinations of the elements of a character vector — combn_char","text":"x character vector","code":""},{"path":"https://gibonet.github.io/distrr/reference/combn_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all combinations of the elements of a character vector — combn_char","text":"nested list. list whose elements lists containing character vectors combinations elements.","code":""},{"path":"https://gibonet.github.io/distrr/reference/combn_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate all combinations of the elements of a character vector — combn_char","text":"","code":"combn_char(c(\"gender\", \"sector\")) #> [[1]] #> [[1]][[1]] #> [1] \"gender\" \"sector\" #>  #>  #> [[2]] #> [[2]][[1]] #> [1] \"gender\" #>  #> [[2]][[2]] #> [1] \"sector\" #>  #>  combn_char(c(\"gender\", \"sector\", \"education\")) #> [[1]] #> [[1]][[1]] #> [1] \"gender\"    \"sector\"    \"education\" #>  #>  #> [[2]] #> [[2]][[1]] #> [1] \"gender\" \"sector\" #>  #> [[2]][[2]] #> [1] \"gender\"    \"education\" #>  #> [[2]][[3]] #> [1] \"sector\"    \"education\" #>  #>  #> [[3]] #> [[3]][[1]] #> [1] \"gender\" #>  #> [[3]][[2]] #> [1] \"sector\" #>  #> [[3]][[3]] #> [1] \"education\" #>  #>"},{"path":"https://gibonet.github.io/distrr/reference/dcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Data cube creation (dcc) — dcc","title":"Data cube creation (dcc) — dcc","text":"Data cube creation (dcc)","code":""},{"path":"https://gibonet.github.io/distrr/reference/dcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data cube creation (dcc) — dcc","text":"","code":"dcc(.data, .variables, .fun = jointfun_, ...)  dcc2(.data, .variables, .fun = jointfun_, order_type = extract_unique2, ...)  dcc5(   .data,   .variables,   .fun = jointfun_,   .total = \"Totale\",   order_type = extract_unique4,   .all = TRUE,   ... )"},{"path":"https://gibonet.github.io/distrr/reference/dcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data cube creation (dcc) — dcc","text":".data data frame processed .variables variables split data frame , character vector (c(\"var1\", \"var2\")). .fun function apply piece (default: jointfun_) ... additional functions passed .fun. order_type function like extract_unique extract_unique2. .total character string name give subset data includes observations variable (default: \"Totale\"). .logical, indicating functions' evaluated complete dataset.","code":""},{"path":"https://gibonet.github.io/distrr/reference/dcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data cube creation (dcc) — dcc","text":"data cube, column     cateogorical variable used, row     combination categorical variables'     modalities. addition modalities,     variable also \"Total\" possibility,     includes others. data cube     contain marginal, conditional joint empirical     distributions...","code":""},{"path":"https://gibonet.github.io/distrr/reference/dcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data cube creation (dcc) — dcc","text":"","code":"data(\"invented_wages\") str(invented_wages) #> tibble [1,000 × 5] (S3: tbl_df/tbl/data.frame) #>  $ gender        : Factor w/ 2 levels \"men\",\"women\": 1 2 1 2 1 1 1 2 2 2 ... #>  $ sector        : Factor w/ 2 levels \"secondary\",\"tertiary\": 2 1 2 2 1 1 2 1 2 1 ... #>  $ education     : Factor w/ 3 levels \"I\",\"II\",\"III\": 3 2 2 2 2 1 3 1 2 2 ... #>  $ wage          : num [1:1000] 8400 4200 5100 7400 4300 4900 5400 2900 4500 3000 ... #>  $ sample_weights: num [1:1000] 105 32 36 12 21 46 79 113 34 32 ... tmp <- dcc(   .data = invented_wages,    .variables = c(\"gender\", \"sector\"),    .fun = jointfun_ ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% tmp #> # A tibble: 9 × 3 #>   gender sector        n #> * <fct>  <fct>     <int> #> 1 Totale Totale     1000 #> 2 Totale secondary   455 #> 3 Totale tertiary    545 #> 4 men    Totale      547 #> 5 men    secondary   289 #> 6 men    tertiary    258 #> 7 women  Totale      453 #> 8 women  secondary   166 #> 9 women  tertiary    287 str(tmp) #> tibble [9 × 3] (S3: tbl_df/tbl/data.frame) #>  $ gender: Factor w/ 3 levels \"Totale\",\"men\",..: 1 1 1 2 2 2 3 3 3 #>  $ sector: Factor w/ 3 levels \"Totale\",\"secondary\",..: 1 2 3 1 2 3 1 2 3 #>  $ n     : int [1:9] 1000 455 545 547 289 258 453 166 287 #>  - attr(*, \".variables\")= chr [1:2] \"gender\" \"sector\" tmp2 <- dcc2(   .data = invented_wages,    .variables = c(\"gender\", \"education\"),    .fun = jointfun_,    order_type = extract_unique2 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% tmp2 #> # A tibble: 12 × 3 #>    gender education     n #>  * <fct>  <fct>     <int> #>  1 Totale Totale     1000 #>  2 Totale I           172 #>  3 Totale II          719 #>  4 Totale III         109 #>  5 men    Totale      547 #>  6 men    I            60 #>  7 men    II          409 #>  8 men    III          78 #>  9 women  Totale      453 #> 10 women  I           112 #> 11 women  II          310 #> 12 women  III          31 str(tmp2) #> tibble [12 × 3] (S3: tbl_df/tbl/data.frame) #>  $ gender   : Factor w/ 3 levels \"Totale\",\"men\",..: 1 1 1 1 2 2 2 2 3 3 ... #>  $ education: Factor w/ 4 levels \"Totale\",\"I\",\"II\",..: 1 2 3 4 1 2 3 4 1 2 ... #>  $ n        : int [1:12] 1000 172 719 109 547 60 409 78 453 112 ... #>  - attr(*, \".variables\")= chr [1:2] \"gender\" \"education\"  # dcc5 works like dcc2, but has an additional optional argument, .total, # that can be added to give a name to the groups that include all the  # observations of a variable. tmp5 <- dcc5(   .data = invented_wages,    .variables = c(\"gender\", \"education\"),   .fun = jointfun_,   .total = \"TOTAL\",   order_type = extract_unique2 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% tmp5 #> # A tibble: 12 × 3 #>    gender education     n #>  * <fct>  <fct>     <int> #>  1 TOTAL  TOTAL      1000 #>  2 TOTAL  I           172 #>  3 TOTAL  II          719 #>  4 TOTAL  III         109 #>  5 men    TOTAL       547 #>  6 men    I            60 #>  7 men    II          409 #>  8 men    III          78 #>  9 women  TOTAL       453 #> 10 women  I           112 #> 11 women  II          310 #> 12 women  III          31"},{"path":"https://gibonet.github.io/distrr/reference/dcc6.html","id":null,"dir":"Reference","previous_headings":"","what":"Data cube creation — dcc6","title":"Data cube creation — dcc6","text":"Data cube creation","code":""},{"path":"https://gibonet.github.io/distrr/reference/dcc6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data cube creation — dcc6","text":"","code":"dcc6(   .data,   .variables,   .funs_list = list(n = ~dplyr::n()),   .total = \"Totale\",   order_type = extract_unique4,   .all = TRUE )  dcc6_fixed(   .data,   .variables,   .funs_list = list(n = ~dplyr::n()),   .total = \"Totale\",   order_type = extract_unique5,   .all = TRUE,   fixed_variable = NULL )"},{"path":"https://gibonet.github.io/distrr/reference/dcc6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data cube creation — dcc6","text":".data data frame processed. .variables variables split data frame , character vector (c(\"var1\", \"var2\")). .funs_list list function calls form right-hand formula. .total character string name give subset data includes observations variable (default: \"Totale\"). order_type function like extract_unique extract_unique2. .logical, indicating functions evaluated complete dataset. fixed_variable name variable want estimate total","code":""},{"path":"https://gibonet.github.io/distrr/reference/dcc6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data cube creation — dcc6","text":"","code":"dcc6(   invented_wages,   .variables = c(\"gender\", \"sector\"),    .funs_list = list(n = ~dplyr::n()),   .all = TRUE ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% #> # A tibble: 9 × 3 #>   gender sector        n #> * <fct>  <fct>     <int> #> 1 Totale Totale     1000 #> 2 Totale secondary   455 #> 3 Totale tertiary    545 #> 4 men    Totale      547 #> 5 men    secondary   289 #> 6 men    tertiary    258 #> 7 women  Totale      453 #> 8 women  secondary   166 #> 9 women  tertiary    287       dcc6(   invented_wages,   .variables = c(\"gender\", \"sector\"),    .funs_list = list(n = ~dplyr::n()),   .all = FALSE ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% #> # A tibble: 8 × 3 #>   gender sector        n #>   <fct>  <fct>     <int> #> 1 Totale secondary   455 #> 2 Totale tertiary    545 #> 3 men    Totale      547 #> 4 men    secondary   289 #> 5 men    tertiary    258 #> 6 women  Totale      453 #> 7 women  secondary   166 #> 8 women  tertiary    287"},{"path":"https://gibonet.github.io/distrr/reference/distrr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"distrr: Estimate and Manage Empirical Distributions — distrr-package","title":"distrr: Estimate and Manage Empirical Distributions — distrr-package","text":"Tools estimate manage empirical distributions, work survey data. One main features possibility create data cubes estimated statistics, include combinations variables interest (see example functions dcc5() dcc6()).","code":""},{"path":[]},{"path":"https://gibonet.github.io/distrr/reference/distrr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"distrr: Estimate and Manage Empirical Distributions — distrr-package","text":"Maintainer: Sandro Burri gibo.gaf@gmail.com","code":""},{"path":"https://gibonet.github.io/distrr/reference/extract_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to be used in conjunction with 'dcc' family — extract_unique","title":"Functions to be used in conjunction with 'dcc' family — extract_unique","text":"Functions used conjunction 'dcc' family","code":""},{"path":"https://gibonet.github.io/distrr/reference/extract_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to be used in conjunction with 'dcc' family — extract_unique","text":"","code":"extract_unique(df)  extract_unique2(df)  extract_unique3(df)  extract_unique4(df)  extract_unique5(df)"},{"path":"https://gibonet.github.io/distrr/reference/extract_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to be used in conjunction with 'dcc' family — extract_unique","text":"df data frame","code":""},{"path":"https://gibonet.github.io/distrr/reference/extract_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to be used in conjunction with 'dcc' family — extract_unique","text":"list whose elements character vectors     unique values column","code":""},{"path":"https://gibonet.github.io/distrr/reference/extract_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to be used in conjunction with 'dcc' family — extract_unique","text":"","code":"data(\"invented_wages\") tmp <- extract_unique(df = invented_wages[, c(\"gender\", \"sector\")]) tmp #> $gender #> [1] \"men\"   \"women\" #>  #> $sector #> [1] \"tertiary\"  \"secondary\" #>  str(tmp) #> List of 2 #>  $ gender: chr [1:2] \"men\" \"women\" #>  $ sector: chr [1:2] \"tertiary\" \"secondary\""},{"path":"https://gibonet.github.io/distrr/reference/invented_wages.html","id":null,"dir":"Reference","previous_headings":"","what":"Invented dataset with wages of men and women. — invented_wages","title":"Invented dataset with wages of men and women. — invented_wages","text":"dataset completely invented, order examples package.","code":""},{"path":"https://gibonet.github.io/distrr/reference/invented_wages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invented dataset with wages of men and women. — invented_wages","text":"","code":"invented_wages"},{"path":"https://gibonet.github.io/distrr/reference/invented_wages.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Invented dataset with wages of men and women. — invented_wages","text":"data frame (tibble) 1000 rows 5 variables: gender gender worker (men women) sector economic sector worker employed (secondary tertiary) education educational level worker (, II III) wage monthly wage worker (invented currency) sample_weights sampling weights","code":""},{"path":"https://gibonet.github.io/distrr/reference/invented_wages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Invented dataset with wages of men and women. — invented_wages","text":"Every row dataset consists fake/invented individual worker. every individual /gender, economic sector /works, /level education /wage. Furthermore column sampling weights.","code":""},{"path":"https://gibonet.github.io/distrr/reference/jointfun_.html","id":null,"dir":"Reference","previous_headings":"","what":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","title":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","text":"minimal function counts number observations groups data frame","code":""},{"path":"https://gibonet.github.io/distrr/reference/jointfun_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","text":"","code":"jointfun_(.data, .variables, ...)"},{"path":"https://gibonet.github.io/distrr/reference/jointfun_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","text":".data data frame processed .variables variables split data frame , character vector (c(\"var1\", \"var2\")). ... additional function calls applied .data","code":""},{"path":"https://gibonet.github.io/distrr/reference/jointfun_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","text":"data frame, column cateogrical variable used, row combination categorical variables' modalities.","code":""},{"path":"https://gibonet.github.io/distrr/reference/jointfun_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A minimal function which counts the number of observations by groups in a data frame — jointfun_","text":"","code":"data(\"invented_wages\") tmp <- jointfun_(.data = invented_wages, .variables = c(\"gender\", \"sector\")) tmp #> # A tibble: 4 × 3 #> # Groups:   gender [2] #>   gender sector        n #>   <fct>  <fct>     <int> #> 1 men    secondary   289 #> 2 men    tertiary    258 #> 3 women  secondary   166 #> 4 women  tertiary    287 str(tmp) #> gropd_df [4 × 3] (S3: grouped_df/tbl_df/tbl/data.frame) #>  $ gender: Factor w/ 2 levels \"men\",\"women\": 1 1 2 2 #>  $ sector: Factor w/ 2 levels \"secondary\",\"tertiary\": 1 2 1 2 #>  $ n     : int [1:4] 289 258 166 287 #>  - attr(*, \"groups\")= tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ gender: Factor w/ 2 levels \"men\",\"women\": 1 2 #>   ..$ .rows : list<int> [1:2]  #>   .. ..$ : int [1:2] 1 2 #>   .. ..$ : int [1:2] 3 4 #>   .. ..@ ptype: int(0)  #>   ..- attr(*, \".drop\")= logi TRUE"},{"path":"https://gibonet.github.io/distrr/reference/only_joint.html","id":null,"dir":"Reference","previous_headings":"","what":"Keeps only joint distribution (removes '.total'). — only_joint","title":"Keeps only joint distribution (removes '.total'). — only_joint","text":"Removes rows variables value .total.","code":""},{"path":"https://gibonet.github.io/distrr/reference/only_joint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keeps only joint distribution (removes '.total'). — only_joint","text":"","code":"only_joint(.cube, .total = \"Totale\", .variables = NULL)"},{"path":"https://gibonet.github.io/distrr/reference/only_joint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keeps only joint distribution (removes '.total'). — only_joint","text":".cube datacube 'Totale' modalities .total modality eliminate (filter ) (default: \"Totale\") .variables character vector names categorical variables","code":""},{"path":"https://gibonet.github.io/distrr/reference/only_joint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keeps only joint distribution (removes '.total'). — only_joint","text":"subset data cube     combinations variables modalities, without \"margins\".","code":""},{"path":"https://gibonet.github.io/distrr/reference/only_joint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keeps only joint distribution (removes '.total'). — only_joint","text":"","code":"data(invented_wages) str(invented_wages) #> tibble [1,000 × 5] (S3: tbl_df/tbl/data.frame) #>  $ gender        : Factor w/ 2 levels \"men\",\"women\": 1 2 1 2 1 1 1 2 2 2 ... #>  $ sector        : Factor w/ 2 levels \"secondary\",\"tertiary\": 2 1 2 2 1 1 2 1 2 1 ... #>  $ education     : Factor w/ 3 levels \"I\",\"II\",\"III\": 3 2 2 2 2 1 3 1 2 2 ... #>  $ wage          : num [1:1000] 8400 4200 5100 7400 4300 4900 5400 2900 4500 3000 ... #>  $ sample_weights: num [1:1000] 105 32 36 12 21 46 79 113 34 32 ...  vars <- c(\"gender\", \"education\") tmp <- dcc2(   .data = invented_wages,    .variables = vars,    .fun = jointfun_,    order_type = extract_unique2 ) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% tmp #> # A tibble: 12 × 3 #>    gender education     n #>  * <fct>  <fct>     <int> #>  1 Totale Totale     1000 #>  2 Totale I           172 #>  3 Totale II          719 #>  4 Totale III         109 #>  5 men    Totale      547 #>  6 men    I            60 #>  7 men    II          409 #>  8 men    III          78 #>  9 women  Totale      453 #> 10 women  I           112 #> 11 women  II          310 #> 12 women  III          31 str(tmp) #> tibble [12 × 3] (S3: tbl_df/tbl/data.frame) #>  $ gender   : Factor w/ 3 levels \"Totale\",\"men\",..: 1 1 1 1 2 2 2 2 3 3 ... #>  $ education: Factor w/ 4 levels \"Totale\",\"I\",\"II\",..: 1 2 3 4 1 2 3 4 1 2 ... #>  $ n        : int [1:12] 1000 172 719 109 547 60 409 78 453 112 ... #>  - attr(*, \".variables\")= chr [1:2] \"gender\" \"education\" only_joint(tmp, .variables = vars) #> # A tibble: 6 × 3 #>   gender education     n #>   <fct>  <fct>     <int> #> 1 men    I            60 #> 2 men    II          409 #> 3 men    III          78 #> 4 women  I           112 #> 5 women  II          310 #> 6 women  III          31  # Compare dimensions (number of groups) dim(tmp) #> [1] 12  3 dim(only_joint(tmp, .variables = vars)) #> [1] 6 3"},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical weighted quantile — wq","title":"Empirical weighted quantile — wq","text":"Empirical weighted quantile","code":""},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical weighted quantile — wq","text":"","code":"wq(x, weights, probs = c(0.5))"},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical weighted quantile — wq","text":"x numeric vector weights vector (positive) sample weights probs numeric vector desired quantile levels (default 0.5, median)","code":""},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical weighted quantile — wq","text":"weighted quantile (numeric vector)","code":""},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical weighted quantile — wq","text":"Ferrez, J., Graf, M. (2007). Enquète suisse sur     la structure des salaires. Programmes R pour l'intervalle     de confiance de la médiane.     (Rapport de méthodes . 338-0045). Neuchâtel:     Office fédéral de statistique.","code":""},{"path":"https://gibonet.github.io/distrr/reference/wq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical weighted quantile — wq","text":"","code":"wq(x = rnorm(100), weights = runif(100)) #> [1] 0.04653138"}]
